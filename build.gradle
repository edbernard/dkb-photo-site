buildscript {
    repositories {
        mavenLocal()
        mavenCentral()
        maven { url 'http://oss.sonatype.org/content/groups/public/' }
        jcenter()
    }

    dependencies {
       classpath 'com.google.javascript:closure-compiler:v20140730+'
       classpath 'org.yaml:snakeyaml:1.17-SNAPSHOT'
       classpath 'com.google.guava:guava:19.0+'
       classpath 'com.jdbernard:simple-groovy-server:2.0'
       //classpath 'com.monochromeroad.gradle-plugins:gradle-aws-s3-sync:0.10-SNAPSHOT'
    }
}

import java.util.regex.Pattern
import org.yaml.snakeyaml.Yaml
import com.jdbernard.dkbphotosite.Category as SiteCategory
import com.jdbernard.dkbphotosite.SiteBuilder
import com.jdbernard.net.GroovyDirectoryServer
//import com.monochromeroad.gradle.plugin.aws.s3.S3Sync

group = "com.jdbernard"
version = "1.0.0"

def siteConfigFile = new File('site-configuration.yaml')
def yaml = new Yaml()
def siteConfig
def rootCategory

task init(
    group: 'build',
    description: "Initialize the builder's properties and configuration.") << {

    println "Initializing build system."
    siteConfigFile.withInputStream { is -> siteConfig = yaml.load(is) }

    // Recompute dynamic properties.
    siteConfig.imageFilenamePattern = Pattern.compile(/(?i)^.+\.(/ +
        siteConfig.imageFileExtensions.join('|') + /)$/)

    ['build/webroot/css', 'build/webroot/js'].each { new File(it).mkdirs() }
}

task clean(
    group: 'build',
    description: 'Deletes all intermediate files.',
    type: Delete) {
    delete 'build'
    delete 'buildSrc/build'
}

task incVersion(
    group: 'build',
    description: 'Increment the site minor verison number.') << {

    siteConfig.version.minor++;
    siteConfigFile.withOutputStream { os -> yaml.dump(siteConfig, os) }
}

task loadRootCategory(
    group: 'build',
    description: 'Read and parse the image/category data from album storage.',
    dependsOn: init) << {

    println "Parsing image and category data..."
    rootCategory = new SiteCategory(
        siteConfig, new File(siteConfig.albumsDirectory), null)
}

task thumbnails(
    group: 'build',
    description: 'Create thumbnails for the image files.',
    dependsOn: loadRootCategory) << {

}

task compileHtml(
    group: 'build',
    description: 'Compile HTML templates into rendered output.',
    dependsOn: [loadRootCategory, thumbnails]) << {

    def siteBuilder = new SiteBuilder(
        new FileReader(siteConfig.pageTemplate), siteConfig)
    siteBuilder.buildPages(new File('build/webroot'), rootCategory)
}

task assemble(
    group: 'build',
    description: 'Assembles the resources needed for the site.',
    dependsOn: init,
    type: Copy) {

    from('template') {
        include "**/*.css"
        include "**/*.js"
    }

    into 'build/webroot'
}

task preview(
    group: 'build',
    description: 'Build the site and run a preview locally.',
    dependsOn: [compileHtml, assemble]) << {

    System.setProperty("org.eclipse.jetty.LEVEL", "INFO")
    def server = GroovyDirectoryServer.runJetty([
        mappedPaths: [
            ['/', 'build/webroot'],
            ['/images/*', siteConfig.albumsDirectory]],
        rewriteRules: [
            ["/(.+)\\.(${siteConfig.imageFileExtensions.join('|')})\$", "/images/\$1.\$2"]],
        port: 9001
    ])

    println "\n\n"
    println ">  The local preview is now available at http://localhost:9001"
    println ">  Press enter key to stop..."
    println ""
    System.in.read()
    server.stop()
}


/*task s3upload(
    group: 'deploy',
    description: 'Upload site to Amazon S3 for service.',
    dependsOn: build,
    type: S3Sync) {

    //accessKey awsAccessKey
    //secretKey awsSecretKey

    //configFile "jets3t.properties"

    from "build/webroot"
    into "david.jdbernard.com"
}*/

task upload(
    group: 'deploy',
    description: '',
    dependsOn: [compileHtml, assemble]) << {

}
